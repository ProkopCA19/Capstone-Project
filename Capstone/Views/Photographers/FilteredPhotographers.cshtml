@model IEnumerable<Capstone.Models.Photographer>

@{
    ViewBag.Title = "FilteredPhotographers";
}

<br />
<br />
<br />
<center><h2>Find My Photographer</h2></center>


<br />

@using (Html.BeginForm("FilteredPhotographers", "Photographers", FormMethod.Get))
{
    <h3>Choose your price range</h3>

    @Html.RadioButton("searchBy", "true")<text>Price Tier 1:$50-100 </text><b><input type="submit" value="Search" /></b>
    <br />
    @Html.RadioButton("searchBy2", "true")<text>Price Tier 2:$100-200 </text><b><input type="submit" value="Search" /> </b>
    <br />
    @Html.RadioButton("searchBy3", "true")<text>Price Tier 3:$200-300 </text><b><input type="submit" value="Search" /></b>
    <br />
    @Html.RadioButton("searchBy4", "true")<text>Price Tier 4:$300+ </text><b><input type="submit" value="Search" /></b>
    <br />

}

<br />

@using (Html.BeginForm())
{
    <p>
        <h3>Enter your zipcode to see photographers in your area</h3>
        @Html.TextBox("searchString")
        <input type="submit" value="Search" />
    </p>
}



<br />
<br />
<table class="table">

    <tr>
        <th>
            @Html.DisplayNameFor(model => model.FirstName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.LastName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Email)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.City)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.State)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Zipcode)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.PriceRange1)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.PriceRange2)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.PriceRange3)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.PriceRange4)
        </th>

        <th></th>
    </tr>

    @foreach (var item in Model)
    {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.FirstName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.LastName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Email)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.City)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.State)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Zipcode)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.PriceRange1)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.PriceRange2)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.PriceRange3)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.PriceRange4)
        </td>
        <td>
            @Html.ActionLink("View Openings!", "Index", "BasicScheduler", new { id = item.Id }, null) 
        </td>

    </tr>
    }

</table>

<br />
<br />

<style>
    /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
    #map {
        height: 600px;
        width: 100%;
    }
    /* Optional: Makes the sample page fill the window. */
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }
</style>

            

<div class="row">

    <div id="map"></div>
    <script>



        function initMap() {
            var map = new google.maps.Map(document.getElementById('map'), {
                zoom: 8,
                center: { lat: -34.397, lng: 150.644 }
            });
            var geocoder = new google.maps.Geocoder();
            //document.getElementById('submit').addEventListener('click', function () {
                geocodeAddress(geocoder, map);
            
        }

        function geocodeAddress(geocoder, resultsMap) {

 
         
            var array = @Html.Raw(Json.Encode(ViewBag.PhotoList));
         
            
            for (var i = 0; i < array.length; i++) {
                var address = array[i];
                geocoder.geocode({ 'address': address }, function (results, status) {
                    if (status === 'OK') {
                        resultsMap.setCenter(results[0].geometry.location);
                        var marker = new google.maps.Marker({
                            map: resultsMap,
                            position: results[0].geometry.location
                        });
                    } else {
                        alert('Geocode was not successful for the following reason: ' + status);
                    }

                });

      
            }
        }

































        @*function initMap() {

            
            var coords = someFunction();
            
            var map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 43.034992, lng: -87.922501 },
                zoom: 8
            });


            for (i = 0; i <= coords.length; i++) {
                var data = coords[i];
                var myLatlng = new google.maps.LatLng(data.lat, data.lng);
                var marker = new google.maps.Marker({
                    position: myLatlng, /*data[0].geometry.location*/
                    map: map,
                    title: data.title
                });
            }

        }

    


        function someFunction(){
            var coords = [];

            for (var i = 0; i < @ViewBag.PhotoList.Count; i++) {
                var currAddress = "@ViewBag.PhotoList[1]";
                debugger;
                var geocoder = new google.maps.Geocoder(); 
                    geocoder.geocode({ 'address': currAddress }), function (results, status) {
                        if (status == google.maps.GeocoderStatus.OK) {
                            coords.push(results[0].geometry.location);
                        }
                        else{
                            throw ('No results found: ' + status);
                        }
                    }
               
            }
            return coords;
        }*@

      
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAefKR3EiaTkne1xTFji0b_NK_tFFrRZfM&callback=initMap"
            async defer></script>

</div>